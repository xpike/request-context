<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XPike.RequestContext</name>
    </assembly>
    <members>
        <member name="T:XPike.RequestContext.DefaultRequestContextProvider">
            <inheritdoc cref="T:XPike.RequestContext.IDefaultRequestContextProvider" />
            <summary>
            Returns an empty DefaultRequestContext.
            </summary>
        </member>
        <member name="M:XPike.RequestContext.DefaultRequestContextProvider.CreateContext">
            <inheritdoc />
            <summary>
            Creates a new RequestContext with all "empty" values.
            
            The RequestId will be set to a new Guid.
            Dictionaries will be non-null, but empty.
            Strings will have the value "None".
            Port will have a value of 0.
            </summary>
        </member>
        <member name="T:XPike.RequestContext.IDefaultRequestContextProvider">
             <inheritdoc cref="T:XPike.RequestContext.IRequestContextProvider" />
             <summary>
             Represents the default implementation of IRequestContextProvider which returns
             a default/empty IRequestContext, when no other providers are a match.
            
             This should be registered as a Singleton.
             </summary>
        </member>
        <member name="T:XPike.RequestContext.IDependencyCollectionExtensions">
            <summary>
            Extension methods for registering and configuring base support for XPike.DefaultRequestContext.
            </summary>
        </member>
        <member name="M:XPike.RequestContext.IDependencyCollectionExtensions.AddXPikeRequestContext(XPike.IoC.IDependencyCollection)">
            <summary>
            Adds the XPike.DefaultRequestContext library to the DI container.
            You should use one of the extension methods from an implementing library instead, such as from XPike.DefaultRequestContext.Http.AspNetCore.
            
            NOTE: If you call this directly, you should also add an appropriate implementation of IRequestContextProvider to a Singleton Collection.
            </summary>
            <param name="collection">The IDependencyCollection to add registrations to.</param>
            <returns>The IDependencyCollection.</returns>
        </member>
        <member name="T:XPike.RequestContext.IRequestContext">
            <summary>
            A protocol-agnostic representation of the concept of a Request Context.
            
            At a later time we may introduce a subclass of this interface which also contains
            the payload, such as the string body of an HTTP POST, or a generic TPayload object.
            </summary>
        </member>
        <member name="P:XPike.RequestContext.IRequestContext.RequestId">
            <summary>
            A unique ID representing this request.
            This is intended to be generated by the server each time a request is received.
            It therefore can't be relied upon as a nonce for de-duplication.
            </summary>
        </member>
        <member name="P:XPike.RequestContext.IRequestContext.Headers">
            <summary>
            Additional data about the request represented in some form of header construct
            such as HTTP Request Headers for a WebAPI/MVC request.
            
            If a header has multiple values, they should be separated by ";".
            </summary>
        </member>
        <member name="P:XPike.RequestContext.IRequestContext.Protocol">
            <summary>
            The protocol used to transmit the request, such as "http" or "https".
            </summary>
        </member>
        <member name="P:XPike.RequestContext.IRequestContext.Verb">
            <summary>
            The verb used to define how an action is called, such as "GET" or "POST" for HTTP requests.
            </summary>
        </member>
        <member name="P:XPike.RequestContext.IRequestContext.Host">
            <summary>
            The hostname or IP address (if available/applicable) used to transmit the request, or "None".
            </summary>
        </member>
        <member name="P:XPike.RequestContext.IRequestContext.Port">
            <summary>
            The TCP port (if available/applicable) where the request was transmitted to, or 0.
            </summary>
        </member>
        <member name="P:XPike.RequestContext.IRequestContext.Address">
            <summary>
            The "address" the request was targeting, such as a URL like "/user/3/details" for HTTP or a topic name for AMQP.
            </summary>
        </member>
        <member name="P:XPike.RequestContext.IRequestContext.Parameters">
             <summary>
             Any parameters specific to the request which are separate from the request's payload,
             such as QueryString parameters for an HTTP request.
            
             If a parameter has multiple values, they should be separated by ";".
             </summary>
        </member>
        <member name="P:XPike.RequestContext.IRequestContext.Claims">
            <summary>
            A list of claims for the current request context.
            Presumably sourced from something such as HttpContext.User / JWT.
            </summary>
        </member>
        <member name="T:XPike.RequestContext.IRequestContextAccessor">
             <summary>
             Represents a Request Context Accessor which is used to identify and retrieve
             the Request Context corresponding to the current processing scope.
            
             This should be registered as a Singleton.
             </summary>
        </member>
        <member name="P:XPike.RequestContext.IRequestContextAccessor.RequestContext">
            <summary>
            Retrieves the Request Context for the current processing scope.
            </summary>
        </member>
        <member name="T:XPike.RequestContext.IRequestContextProvider">
             <summary>
             Represents a Provider of Request Context data which may return a Request Context
             if it is authoritative over the current processing scope, or null otherwise.
            
             This should be added to a Singleton Collection in the DI container.
             </summary>
        </member>
        <member name="M:XPike.RequestContext.IRequestContextProvider.CreateContext">
            <summary>
            Creates and returns a new Request Context, if this provider is authoritative
            over the current processing scope.
            </summary>
            <returns>The current DefaultRequestContext, or null.</returns>
        </member>
        <member name="T:XPike.RequestContext.Package">
            <inheritdoc cref="T:XPike.IoC.IDependencyPackage" />
            <summary>
            Configures the Dependency Injection container with the necessary
            registrations for XPike.DefaultRequestContext.
            </summary>
        </member>
        <member name="M:XPike.RequestContext.Package.RegisterPackage(XPike.IoC.IDependencyCollection)">
            <summary>
            Registers the XPike.DefaultRequestContext dependencies in the DI container.
            </summary>
            <param name="dependencyCollection">The IDependencyCollection to add registrations to.</param>
        </member>
        <member name="T:XPike.RequestContext.RequestContext">
            <summary>
            The default implementation of IRequestContext.
            </summary>
        </member>
        <member name="P:XPike.RequestContext.RequestContext.RequestId">
            <inheritdoc />
        </member>
        <member name="P:XPike.RequestContext.RequestContext.Headers">
            <inheritdoc />
        </member>
        <member name="P:XPike.RequestContext.RequestContext.Protocol">
            <inheritdoc />
        </member>
        <member name="P:XPike.RequestContext.RequestContext.Verb">
            <inheritdoc />
        </member>
        <member name="P:XPike.RequestContext.RequestContext.Host">
            <inheritdoc />
        </member>
        <member name="P:XPike.RequestContext.RequestContext.Port">
            <inheritdoc />
        </member>
        <member name="P:XPike.RequestContext.RequestContext.Address">
            <inheritdoc />
        </member>
        <member name="P:XPike.RequestContext.RequestContext.Parameters">
            <inheritdoc />
        </member>
        <member name="P:XPike.RequestContext.RequestContext.Claims">
            <inheritdoc />
        </member>
        <member name="T:XPike.RequestContext.RequestContextAccessor">
             <inheritdoc cref="T:XPike.RequestContext.IRequestContextAccessor" />
             <summary>
             The default implementation of IRequestContextAccessor.
            
             Uses an injected collection of Singleton IRequestContextProvider objects, in reverse
             order, to create the IRequestContext for the current processing scope.
             
             In .NET Core, uses AsyncLocal to cache the IRequestContext.
             In .NET Framework, uses CallContext.LogicalSetData() / CallContext.LogicalGetData().
             </summary>
        </member>
        <member name="F:XPike.RequestContext.RequestContextAccessor.Localizer">
            <summary>
            Uses AsyncLocal to provide scope-isolated caching of the IRequestContext.
            </summary>
        </member>
        <member name="F:XPike.RequestContext.RequestContextAccessor.Logger">
            <summary>
            The ILog instance to use for logging.
            </summary>
        </member>
        <member name="F:XPike.RequestContext.RequestContextAccessor.Providers">
            <summary>
            The list of IRequestContextProviders to use when creating an IRequestContext.
            </summary>
        </member>
        <member name="P:XPike.RequestContext.RequestContextAccessor.RequestContext">
            <inheritdoc />
            <summary>
            NOTE: Beware overriding this - it is within this property accessor that the scope isolation through Localizer occurs!
            </summary>
        </member>
        <member name="M:XPike.RequestContext.RequestContextAccessor.#ctor(System.Collections.Generic.IEnumerable{XPike.RequestContext.IRequestContextProvider},XPike.Logging.ILog{XPike.RequestContext.RequestContextAccessor})">
            <summary>
            Creates a new RequestContextAccessor which will use the specified IRequestContextProviders
            (in reverse order) to find the appropriate IRequestContext for the execution scope when
            one is requested.
            </summary>
            <param name="providers">An IEnumerable of IRequestContextProviders to use.  A reverse-ordered list will be created from this.</param>
            <param name="logger">The ILog instance to use for logging.</param>
        </member>
        <member name="M:XPike.RequestContext.RequestContextAccessor.CreateContext">
             <summary>
             Creates the IRequestContext by scanning through the Providers.
             The value from the first Provider which returns a non-null IRequestContext will be used.
            
             A Warning will be logged if no Provider returns a value.
             </summary>
             <returns>The IRequestContext for the current processing scope.</returns>
        </member>
    </members>
</doc>
